import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

import { message, setAuthToken } from '../../app/helpers/utils'

import type { AppState } from '../../app/store'

import type ApiAccountAdminType from '../../app/types/api/account/admin'
import type ApiAccountUserType from '../../app/types/api/account/user'
import Status from '../../app/types/enums/status'
import MessageType from '../../app/types/message'

import { getCheck, postUserLogin } from './authAPI'

interface AuthState {
    token: string | null
    data: ApiAccountAdminType | ApiAccountUserType | null
    role?: string
    status: Status
    message: MessageType | null
}

const initialState: AuthState = {
    token: null,
    data: null,
    status: Status.IDLE,
    message: null
}

export const userLogin = createAsyncThunk('auth/user/login', async (data: { email: string, password: string }) => await postUserLogin(data))
export const check = createAsyncThunk('auth/check', async () => {
    const token = localStorage.getItem('token')
    if (token) {
        setAuthToken(token)
        return await getCheck()
    }
})
const checkAuthTimeout = createAsyncThunk('/auth/timeout', (expirationTime: number) => { setTimeout(() => logout(), expirationTime) })

const dataLoading = (state: AuthState) => {
    state.status = Status.LOADING
}

export const authSlice = createSlice({
    name: 'auth',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        logout: (state) => {
            setAuthToken()
            localStorage.removeItem('token');
            localStorage.removeItem('expirationDate');

            state.token = null
            state.data = null
            state.status = Status.IDLE
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(userLogin.pending, dataLoading)
            .addCase(userLogin.fulfilled, (state, action) => {
                if ('name' in action.payload.data) {
                    localStorage.setItem('token', action.payload.token)
                    localStorage.setItem('expirationDate', new Date(action.payload.expiresAt).toString());

                    state.token = action.payload.token
                    state.data = action.payload.data
                    state.role = 'user'
                    state.status = Status.IDLE

                    checkAuthTimeout(action.payload.expiresAt - new Date().getTime())
                } else state.message = action.payload.data.message
            })
            .addCase(userLogin.rejected, (state, action) => {
                state.token = null
                state.data = null
                if (action.error) state.message = message(action.error.message!, 'danger')
                state.status = Status.FAILED
            })

            .addCase(check.pending, dataLoading)
            .addCase(check.fulfilled, (state, action) => {
                if (action.payload && action.payload.data) {
                    if ('name' in action.payload.data) {
                        const token = localStorage.getItem('token')

                        setAuthToken(token)
                        state.token = token
                        state.data = action.payload.data
                        state.role = action.payload.role
                        state.status = Status.IDLE

                        checkAuthTimeout(new Date(localStorage.getItem('expirationDate')!).getTime() - new Date().getTime())
                    }
                } else {
                    setAuthToken()
                    state.token = null
                    state.data = null
                    state.role = undefined
                    state.status = Status.FAILED
                }
            })
            .addCase(check.rejected, (state, action) => {
                if (action.error.message && action.error.message.includes('401')) {
                    setAuthToken()
                    localStorage.removeItem('token');
                    localStorage.removeItem('expirationDate');
                    location.reload()
                }
                state.token = null
                state.data = null
                state.status = Status.FAILED
            })
    },
})

export const { logout } = authSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.auth.value)`
export const selectAuth = (state: AppState) => state.auth

export default authSlice.reducer