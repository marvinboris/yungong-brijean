import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import { message } from '../../app/helpers/utils'

import type { AppState } from '../../app/store'

import ApiBackendDataType from '../../app/types/api/backend/data'
import Status from '../../app/types/enums/status'
import MessageType from '../../app/types/message'

import backendAPI from './backendAPI'

export interface BackendState {
    data: ApiBackendDataType | null
    status: Status
    message: MessageType | null
}

const initialState: BackendState = {
    data: null,
    status: Status.IDLE,
    message: null
}

export const dashboard = createAsyncThunk('backend/manager/dashboard', async (role: string) => await backendAPI.dashboard(role))
export const get = createAsyncThunk('backend/manager/get', async (params: { role: string, resource: string, page?: number, show?: number | string, search?: string }) => await backendAPI.get(params)(params.page, params.show, params.search))
export const info = createAsyncThunk('backend/manager/info', async (params: { role: string, resource: string }) => await backendAPI.info(params)())
export const show = createAsyncThunk('backend/manager/show', async (params: { role: string, resource: string, id: string }) => await backendAPI.show(params)(params.id))
export const post = createAsyncThunk('backend/manager/post', async (params: { role: string, resource: string, data: any }) => await backendAPI.post(params)(params.data))
export const patch = createAsyncThunk('backend/manager/patch', async (params: { role: string, resource: string, id: string, data: any }) => await backendAPI.patch(params)(params.id, params.data))
export const _delete = createAsyncThunk('backend/manager/delete', async (params: { role: string, resource: string, id: string }) => await backendAPI.delete(params)(params.id))

const dataLoading = (state: BackendState) => {
    state.message = null
    state.status = Status.LOADING
}

const dataFulfilled = (state: BackendState, action: PayloadAction<ApiBackendDataType>) => {
    if (action.payload) {
        state.data = action.payload
        if (action.payload.message) state.message = action.payload.message
    }
    state.status = Status.IDLE
}

const dataRejected = (state: BackendState, action: any) => {
    state.data = null
    if (action.error) state.message = message(action.error.message!, 'danger')
    state.status = Status.FAILED
}

export const authSlice = createSlice({
    name: 'backend',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        reset: (state) => {
            state.data = null
            state.message = null
            state.status = Status.IDLE
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(dashboard.pending, dataLoading)
            .addCase(dashboard.fulfilled, dataFulfilled)
            .addCase(dashboard.rejected, dataRejected)

            .addCase(get.pending, dataLoading)
            .addCase(get.fulfilled, dataFulfilled)
            .addCase(get.rejected, dataRejected)

            .addCase(info.pending, dataLoading)
            .addCase(info.fulfilled, dataFulfilled)
            .addCase(info.rejected, dataRejected)

            .addCase(show.pending, dataLoading)
            .addCase(show.fulfilled, dataFulfilled)
            .addCase(show.rejected, dataRejected)

            .addCase(post.pending, dataLoading)
            .addCase(post.fulfilled, dataFulfilled)
            .addCase(post.rejected, dataRejected)

            .addCase(patch.pending, dataLoading)
            .addCase(patch.fulfilled, dataFulfilled)
            .addCase(patch.rejected, dataRejected)

            .addCase(_delete.pending, dataLoading)
            .addCase(_delete.fulfilled, dataFulfilled)
            .addCase(_delete.rejected, dataRejected)
    },
})

export const { reset } = authSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.backend.value)`
export const selectBackend = (state: AppState) => state.backend

export default authSlice.reducer